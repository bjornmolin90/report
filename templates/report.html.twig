{# templates/lucky_number.html.twig #}
{% extends 'base.html.twig' %}
{% block content %}
<h1>Redovisning MVC</h1>

<h2>Kmom01</h2>
<p>Min erfarenhet av objektorienterad programmering kommer från tidigare kurser på programmet. Främst från oopython men vi gjorde även lite objektorienterad kod i javascript-kursen samt databas-kursen. Det känns som att förståelsen succesvit har ökad, framförallt hade ett stort fokus på projektorientering och jag hoppas att det fortsätter i denna kursen. Förhoppningsvis finns det även mycket att ta med sig från föregående kurser även om det nu istället gäller PHP.</p>

<p>Det första man behöver kunna för objektorientering är nyckelordet "class". Det är så du skapar en klass som du sen kan instansiera i objekten. En klass är som en mall för objekt. Klassen innehåller metoder (klassens funktioner) och properties (klassens variabler). För att komma åt properties använder man sig av $this som då är specifik för den instansen. Properties kan vara publika men också privata där man bara kommer åt dem med hjälp av metoder. Man kan skicka med argument till klassen som då tillhör just den instansen av objektet. För att komma åt allt skapar man ett nytt objekt av klassen och det objektet har då tillgång till klassens metoder och properties. </p>

<p>I det stora hela känns det som att jag förstår strukturen och vad de olika delarna fyller för funktion. Vissa delar känns lite som magi fortfarande och hur de fungerar som de gör är inte självklart alla gånger. Men att ha en controller med routes och funktioner som i sin tur renderar templates med i det här fallet html-kod och lite bilder och css på det är inga konstigheter. Vi har också jobbat med twig i design-kursen sen tidigare och routes i databas-kursen.</p>

<p>Än så länge har jag mest skummat igenom "PHP The Right Way" då det är ett rätt omfattande dokument. Det jag så här långt känner mig mest intreserad av är Language Highlights. Webtec-kursen var min första bekantskap med programmering och php-delen där minns jag som väldigt svår. Nu har jag lite mer programmering i bagaget och tror därför att många saker som jag inte förstod då kommer att kännas självklara, eller i alla fall förståeliga när jag vet lite mer om vad det innebär att programmera, även om det har varit i andra språk. Av samma anledningen ska det även bli kul med Databases då vi utöver kodandet även haft en hel kurs i databaser och allt troligvis kommer att vara mycket klarare den här gången.</p>

<p>Min TIL detta kursmomentet, utöver att jag har väldigt många lyckotal, är faktiskt att jag på ett djupare plan förstår hur helheten, jämfört med i webtec-kursen funger. Jag märkte att det fungerade då också naturligtvis men det är tydligare hur och vad som är php, symfony, twig och vad controllern gör, hur vyerna renderas och så vidare. </p>

<h2>Kmom02</h2>
<p>Arv innebär att en klass ärver sina egenskaper från en annan klass. Man kan sen lägga till ytterligare funktionalitet genom att addera fler metoder och attribut till subklassen eller överskugga befintliga metoder. Med komposition menas att en klass innehåller en annan klass. Utöver att det måste även klassen i den andra klassen vara beroende av den andra för att existera. Den ena klassen kan alltså bara finnas genom att en annan klassen finns eller instansieras. Ett interface som implementeras är som en ram som visar vad en klass ska kunna göra. Det är just bara en ram och klassen i sig är den som löser det som ska lösas. Ett trait är kod som kan användas i en eller flera klasser. Med arv kan man bara ha en förälder och därför bara ärva från en klass. Traits kan man ha flera av och man kan använda ett trait till flera klasser. Traitet bygger alltså ut funktionaliteten i en redan existerande klass.</p>

<p>Jag är inte särskilt nöjd med min inlämning men jag är nöjd att jag har lämnat in den. Jag tycker att uppgiften var svår, trots att den har kortats ner. I och med att det både var svårt och omfattande har jag hållt det så enkelt som möjligt och försökt få ett resultat som fungerar utan att ha kunnat lägga så mycket tid på annat. Jag har skapat de nödvändiga klasserna och lagt alla routs, utöver json-routen i samma controller. På det har jag twig-filer för respektive vy och en väldigt basal styling som ser till att man förstår vad man ser men inte så mycket mer.</p>

<p>Klasserna hade man säkert kunna lösa smartare men jag är inte säker på hur. Jag kan tänka mig att det finns smartare lösningar för controllern också, eller i klasserna men för att se till att kodmängden i kontrollern hålls nere. Utifrån specifikationen var jag osäker på om man behövde göra post-formulär för vissa av sidorna men med tidsbristen hoppades jag på att det inte behövdes. Som användare hade det naturligtvis varit en klar förbättring att ha knappar för att dela ut kort och lägga till spelare jämfört med att skriva in det i browsern.</p>

<p>Jag har inte gått vidare med planeringen för kortspelet utan väljer att ta det i nästa kursmoment. Det gör egentligen ingen skillnad men det kändes skönare mentalt att få lämnat in det här för att sen ge mig in på nästa. Av erfarenhet från oopython kan jag dock säga att koden i projektet gick förhållandevis snabbt att skriva efter att ha gjort ett klassdiagram och tänkt igenom strukturen noga innan jag gav mig på kodandet.</p>

<p>Min TIL det här kursmomentet är nog främst att hela strukturen börjar sitta lite bättre och att jag har implementerat mina första PHP-klasser. Sammantaget känns det som att saker och ting började klarna lite mer mot slutet av uppgiften efter en tids kämpande.</p>

<h2>Kmom03</h2>
<p>Modelleringen av kortspelet tyckte jag kändes bra. Det går alltid (har jag märkt) lite trögt i början men när man väl kommit över den första tröskeln brukar det flyta på bra. Just det tror jag är en stor anledning till att förarbetet är så bra. Det går inte att komma vidare från modelleringen innan man verkligen har tänkt igenom uppgiften och kunnat formulera det i meningar och diagram. När man sen startar själva kodandet har man kommit mycket längre fram och i slutändan sparar det en tid. Det är inte perfekt och det uppkommer både problem och lösningar man inte har tänkt på men stora delar av programmet och flödet beter sig som jag tänkte mig att det skulle göra. Detta har definitivt underlättat själva kodandet.</p>

<p>Jag har bara adderat en ny klass till de befintliga från kmom02. Jag fick även lägga till ett par metoder i klasserna jag redan hade för att anpassa dem efter hur jag ville att spelet skulle se ut. Den nya klassen game sköter allt kring själva spelet, gör instanser av kortleken och spelarna och sköter spel-logiken. Det blev mindre kod än jag hade trott vilket visar på styrkan i objektorientring. Mycket funktionalitet fanns redan i Card, Deck och Player.</p>

<p>Jag är i stort nöjd med min lösning, men det finns mycket som hade kunnat vara bättre. Jag använde inte flashmeddelanden på grund av tidsbrist och att jag inte satt mig in tillräckligt i hur det fungerar. Istället använder jag boolska variabler och if-satser i twigen för när vissa meddelanden ska skrivas ut. Det fungerar men är kanske onödigt. Jag har försökt hålla nere koden i controllern och lyckats hyfsat tycker jag men det finns säkert smartare lösningar än vad jag har lyckats komma på. Stylingen har jag igen lagt väldigt lite tid på men samtidigt sett till att det är strukturerat och tydligt vad som händer. Men man kunde helt klart förbättrat spelets design. </p>

<p>Det känns bättre och bättre att jobba med Symfony. Det är lite svårt att förstå i början, och fortfarande om man ska vara ärlig men det klarnar successivt. Det är också rimligt att det tar tid att sätta sig in i det med tanke på hur otroligt mycket det förenklar och utför under ytan. Uppdelningen och strukturen är jag klar med och distinktionen mellan symfony, twig, php och vad som gör vad känns tydligare än den gjorde för ett par veckor sen.</p>

<p>Min TIL är att förarbetet gör en positiv skillnad för en uppgift. Det tyckte jag tidigare också, bland annat i oopython-projektet men jag slarvar trots det med det om det inte är ett krav och blir ivrig och börjar koda istället. Det är något jag vill bli bättre på och förhoppningsvis snart har "lärt mig" tillräckligt många gånger för att det ska bli en naturlig del av hur jag tar mig an en uppgift.</p>

<h2>Kmom04</h2>
<p>Det gick bra att skriva tester för min kod. Utöver en viss syntaxskillnad var det väldigt likt hur vi skrev tester i python så mycket kändes bekant och det flöt på bra. Jag hade dock rätt stora problem att få igång phpunit och fick sitta ett antal timmar med det. Efter det flöt det dock på bra som sagt och jag tycker att verktyget är grymt. Överblicken man får i browsern är otroligt bra och det är roligt att se hur effektiva testerna är. Efter strulet med att få det att fungera tycker jag även att det är enkelt att arbeta med.</p>

<p>Kodtäckningen gick bra. Jag kom precis under 90, 89,66% på min gameklass. Klasserna jag hade med mig sen tidigare fick jag 84% täckning på. Jag valde att inte testa någon metod då de inte användes i mitt 21-spel så för metoderna kopplade till 21 tror jag att jag ligger precis över 90%.</p>

<p>Det mesta av koden jag har gjort var enkel att testa. Min metod för shuffle blev lite klurig och kommer att ge fel vid något tillfälle. Jag testar ett korts position före och efter att jag anropat metoden och en gång av femtiotvå kommer den då att ha hamnat på samma plats. Sättet min metod evaluateHand är gjord på gör att det inte fanns något bra sätt att testa ett par av raderna i de övriga metoderna. Den skriver över poängen efter att den testat på om essen ska vara värda 14 eller 1 och jag kunde därför inte hårdkoda in en poäng för att testa om banken skulle ha vunnit där. Det hade gått att skriva om koden för att kunna testa även det. Jag har dock inte valt att göra det då jag ansåg att min kodtäckning var bra ändå. Inte heller någon annan del av min kod har jag behövt/valt att skriva om.</p>

<p>Jag tänker att testbar kod är i alla fall ett tecken på att koden är ren. Koden borde vara lätt att förstå om det är lätt att testa den och komma på vilka tester som hade fungerat. Är den lätt att förstå kan man också anta att den är rent skriven. Sen finns det säkert många andra aspekter som också påverkar.</p>

<p>Min TIL den här veckan är hur verktygen phpunit och phpdoc fungerar. Jag tycker att båda är riktigt bra på sitt sätt. Tydligheten i vad som testas med unit respektive koden i sig i phpdoc är väldigt användbart. De snygga rapporterna gör det lätt att se vad innehållet är.</p>

<h2>Kmom05</h2>
<p>Övningen gick bra och det var inte som jag fastnade på. Jag såg inte föreläsningen live och har därför inte kunnat se den på grund av ljud-problemen. Även om allt flöt på bra hade jag gärna fått lite mer förklaringar och resonemang kring de olika delarna. Därför var det lite synd att inte kunna se föreläsningen då de vanligtvis blir lite mer resonerande. Dock var det inget som påverkade övningen utan hade enbart varit bra förm in egen förståelse.</p>

<p>I och med att vi jobbade med applikationer, databaskopplingar och CRUD rätt nyligen i databaskursen utgick jag mycket från vad som funkade där och hade det i åtanke när jag gjorde denna applikationen. Att ha en tabell för biblioteksvyn där alla böcker visas upp kändes som det bästa sättet att visa upp datan på. Både tabell men även ikoner för delete och update gjorde vi i den föregående kursen och jag tog därför min layout från det projektet. Även tanken med att ha en delete-sida där all information visas upp innan man tar bort boken tog jag med mig från föregående kurs. Jag tycker att det var ett bra sätt att säkerställa att användaren inte råkar trycka av misstag och får en överblick av vad det är den tar bort. För att hålla det så okomplicerat som möjligt för användaren valde jag att ha biblioteksvyn på landnings-sidan. Allt som finns i databasen och allt man kan göra med den finns därmed listat direkt på första-sidan och respektive åtgärd eller vy ligger bara ett klick bort.</p>

<p>Det gick väldigt bra att jobba med både ORM och CRUD. Jag förstår inte exakt hur det fungerar under the hood men det var ett väldigt enkelt sätt att jobba på tillsammans med SQLITE. Några kommandon för att skapa databasen och sen lite tid för att förstå strukturen och innehållet i klasserna och metoderna för databashanteringen. Efter det var det bara att köra igång. Jag fastnade dock en längre tid och felsökte länge vilket jag efter ett tag, utan att ha funnit någon lösning, trodde berodde på att det var svårare än jag först hade uppfattat. Det visade sig till slut bero på att jag helt enkelt inte lagt till GET som metod i routen vilket gjorde att GET-routen tolkades även som post-routen, eftersom det faktiskt även var en post-route. Med det ändrat så jag bara hade en post-route fungerade allt hur bra som helst. Som helhet var jag överraskad av hur smidigt det var att arbeta med. Objektorienterad databas lät lite komplicerat men det gick fort att förstå grunderna och komma igång.</p>

<p>Då jag ligger precis på gränsen tidsmässigt och projektet drar igång nästa vecka valde jag att inte göra några extrauppgifter. Min TIL för veckan är att det finns helt andra sätt att jobba med databashantering av relationsdatabaser än vad vi tidigare har lärt oss. Som bonus visade det sig även vara ett sätt att jobba på som jag tyckte om.</p>

<h2>Kmom06</h2>
<p>Jag tycker att phpmetrics verkar vara ett bra verktyg. Det var mycket olika mätningar och statistik på koden. Lite svårt att hittat rätt och förstå resultaten upplever jag det dock som men overview-sidan gav en bra överblick som hade förbättrats ytterligare om man lagt till kodtäckning vilket jag förstod det som att man kunde. Sidebaren med tydliga rubriker gjorde det lättare att hitta det man ville titta närmare på vilket också är ett plus. Det är dock så många mätningaar och olika värden att det blir svårt att veta vad man ska fokusera på. Nu har vi bara fått en introduktion under en vecka vilket har varit en bra bekantskap men att det krävs lite mer tid för att verkligen förstå och tolka datan på rätt sätt känns det definitivt som. Jag gillade den lilla bilden med maintainability index och komplexiteten då den gav en enklare vy av lite data för alla klasser och även vägde in flera parametrar för att sammanfatta dem i ett maintainability index.</p>

<p>Det var inga problem att integrera Scrutinizer med mitt repo. Allt flöt på smidigt och ett litet fel jag hade råkat skapa när jag strukturerat om lite i koden blev ett felmeddelande när Scrutinizern höll på att bygga. Koden körde inte som den skulle längre men felmeddelandet i terminalen var ingen hjälp, jag satt ganska länge med det men bestämde mig för att försöka ladda upp den ändå för att komma vidare och se hur Scrutinizer jobbade, vilket ledde till att jag faktiskt kunde få rätt på problemet.</p>

<p>Mitt enda problem var att jag även har haft med tools-mappen tidigare. Som en del av mina förbättringar tänkte jag ta bort den vilket ledde till en del problem, inte på grund av Scrutinizer utan skillnaden mellan mitt lokala repo och github då jag tagit bort mappen från mitt git-reo. Efter att ha svettats och läst några timmar blev det bra till slut. Anledningen till att jag ville ta bort tools-mappen, utöver att den inte behövdes var mina mätresultat. Jag hade 6,14 i betyg och 12,7% i kodtäckning. Kodtäckningen påverkades inte då det bara var src-mappen som låg till grund för det men betyget var jag dock säker på var kraftigt försämrat genom att se all kod som tillhörde tools ha låga betyg. Jag tycker att verktyget är bra, väldigt smidigt att det synkas med förändringar på ens repo och badges ger en snabb överblick över hur koden verkar se ut. Det finns så klart en mängd data som utelämnas men jag gillar att man får några pointers presenterade på ett enkelt sätt genom badges.<p>

<p>Jag tror absolut att man kan få indikationer på hur bra koden är genom exempelvis badges. Det viktigaste, som med det mesta i livet tror jag ändå är att ha rätt förhållningssätt till det. Först och främst förstå vad mätvärdena innebär, för att sedan applicera det på sin egen kod och förstå vad de egentligen säger. Då kan man säkert förbättra delar och göra den både säkrare, effektivare och mer förståelig för andra. Utan att veta kan jag tänka mig att det dock kan gå överstyr och att vissa följer sånt här blint vilket jag har svårt att se som något positivt. Att fundera på hur min kod påverkas av förbättringsförslagen och sen applicera dem man tycker känns vettiga tror jag däremot är ett jättebra sätt att jobba på.</p>

<p>Min TIL den här veckan har varit hur många verktyg, mätningar, analyser och så vidare det finns för att avgöra vad som anses vara bra och dålig kod. Jag utgår från att det finns hur mycket som helst vi inte har berört i denna kursen också. Snårigt men intressant att lära sig om.</p>

<h2>Kmom07/10</h2>
<p>För att lösa grunden för projektet har jag fokuserat på vissa bitar lite mer, dels för att det var min plan utifrån hur kursen har varit men även av nödvändighet då några saker tog längre tid än jag hade räknat med. Att ha en bra filstruktur kändes som en viktig del och något jag har lagt kraft på att försöka ordna. Jag har därför ett antal css-moduler och ett antal twig-filer för mina olika delar av sidan, grafer, tabeller, min grund och så vidare. Jag har även försökt hålla ner koden i min controller och försökt lägga koden jag kunde i modell-klasser. Jag har en för att läsa in csv-filerna och en för att bygga grafer. Sammanfattningsvis har jag helt enkelt försökt ha allting på rätt plats och uppdelat för en bra cohesion.</p>

<p>Graferna tog mer tid än jag hade räknat med och var rätt komplicerat. Jag valde att inte använda mig av någon modul som chart.js utan istället göra det med css och html. Att bygga om det till en metod som kunde hantera olika data för att sammanställa en likadan graf var rätt trixigt men jag är nöjd med hur det fungerar. I och med att jag inte har använt program som chart.js vet jag inte om det är onödig tid jag har lagt eller om det hade varit lika klurigt, men i slutändan är jag som sagt nöjd oavsett.</p>

<p>Att jobba med csv-filer som jag valde att göra var även något som tog lite längre tid att få rätt på. Det skiljde sig lite från hur vi har använt databasen och orm tidigare. Även enhetstestningen blev lite svårare eftersom mina modell-klasser hade helt andra funktioner än vad de jag har gjort tidigare hade. Utöver det var det mycket som gick igen från tidigare delar av kursen. Verktygen har vi redan ordnat, linters har vi använt och vi har jobbat med vyer, controllers och skrivit tester och så vidare. Grunderna i orm hade vi också med oss in i projektet. En del nytt men mycket som kändes igen, framförallt började man inte från 0 i de lite svårare delarna utan hade lite kunskaper att bygga vidare på för att lösa det.</p>

<p>Några småsaker stör mig med hur det ser ut. Min test-csv som jag använder mig av för att testa readData-klassen kunde inte läsas i scrutinizer så jag fick lägga den i min Proj-mapp där jag egentligen inte känner att den hör hemma, men jag ville inte heller ha ett error i scrutinizer även om jag kunde köra testerna lokalt. Att ordna länkar till dokumentationen var även det ett problem och jag fick inte rätt på det utan att flytta de från mappen där de genereras. Jag får 4 fel med lintern som jag gärna hade sluppit men som jag anser kan få vara kvar. Det handlar om att det bara finns en get och ingen set-metod för id i mina entities. Det stod i phpstans dokumentation att detta felet uppstår trots att koden är korrekt när man använder sig av doctrine och orm och jag kände därför att det inte var något att lägga kraft på.</p>

<p>Utöver grundkraven har jag löst krav 4 och skrivit en text om snygg kod. Jag försökte bara ta med mig det vi har lärt oss om kodstil under kursens gång och reflektera kring det. Till skillnad från kmom06 var det mer allmänna resonemang och eftersom jag redan har skrivit ganska detaljerat om de 4 C:na och min egen kod tyckte jag att det var bättre att lyfta diskussionen lite. Personligt tycker jag även att det blir mer intressant, både att skriva och att läsa när man kan sätta saker i ett större sammanhang. Vad som faktiskt är rätt och fel i ämnet lämnar jag dock osagt här.</p>

<p>Jag tycker projektet kändes rimligt sett till vad vi har lärt oss under kursens gång. Tiden jag har lagt blir nog 40-50 timmar vilket är vad jag tycker man kan förvänta sig. Det jag kände var dock att jag la för mycket tid på graferna. Kanske var det för att jag valde fel väg, eller skulle det vara så. Jag tyckte ändå att det blev för mycket tid på något så smalt när det finns så mycket annat att lära sig. Sen är det naturligtvis mycket runt omkring man plockar upp och lär sig i samband med det men trots det hade jag hellre lärt mig mer om exempelvis CRUD istället.</p>

<p>Jag har redan nämnt lite om vad som var svårt respektive lätt men att ordna graferna, ordna länkar till dokumentationen (som jag fortfarande inte förstår skulle vara så svårt för mig) och få till inläsningen av csv-filerna på ett bra sätt i en separat modell är nog det som jag har lagt mest tid på. I övrigt ska jag inte säga att det var lätt, men det krävdes generellt mindre tid. Sammantaget tycker jag att det var ett bra projekt, men hade jag ändrat något hade det varit att skippa graferna och fokuera på en annan del som kanske är mer kopplat till symfony och doctrine.</p>

<p>Jag är nöjd med kursen i stort. Den var lite för tung i mitten, kmom 2 och 3 om jag minns rätt. Jag uppskattar ändå att ni är så flexibla och kan justera lite inom rimliga gränser, jag förstod på discord att det var många som tyckte att det var tungt. Positivt har också varit att jag förstår php lite bättre, det var inte direkt en favorit efter webtec-kursen men vi slängdes också in i det utan någon egentlig introduktion. Även symfony har blivit klarare och växt på mig under kursens gång, inte minst nu under projektveckorna. Jag är nöjd med kursen och ger den en 8a i betyg!</p>

{% endblock %}
