{# templates/lucky_number.html.twig #}
{% extends 'base.html.twig' %}
{% block content %}
<h1>Redovisning MVC</h1>

<h2>Kmom01</h2>
<p>Min erfarenhet av objektorienterad programmering kommer från tidigare kurser på programmet. Främst från oopython men vi gjorde även lite objektorienterad kod i javascript-kursen samt databas-kursen. Det känns som att förståelsen succesvit har ökad, framförallt hade ett stort fokus på projektorientering och jag hoppas att det fortsätter i denna kursen. Förhoppningsvis finns det även mycket att ta med sig från föregående kurser även om det nu istället gäller PHP.</p>

<p>Det första man behöver kunna för objektorientering är nyckelordet "class". Det är så du skapar en klass som du sen kan instansiera i objekten. En klass är som en mall för objekt. Klassen innehåller metoder (klassens funktioner) och properties (klassens variabler). För att komma åt properties använder man sig av $this som då är specifik för den instansen. Properties kan vara publika men också privata där man bara kommer åt dem med hjälp av metoder. Man kan skicka med argument till klassen som då tillhör just den instansen av objektet. För att komma åt allt skapar man ett nytt objekt av klassen och det objektet har då tillgång till klassens metoder och properties. </p>

<p>I det stora hela känns det som att jag förstår strukturen och vad de olika delarna fyller för funktion. Vissa delar känns lite som magi fortfarande och hur de fungerar som de gör är inte självklart alla gånger. Men att ha en controller med routes och funktioner som i sin tur renderar templates med i det här fallet html-kod och lite bilder och css på det är inga konstigheter. Vi har också jobbat med twig i design-kursen sen tidigare och routes i databas-kursen.</p>

<p>Än så länge har jag mest skummat igenom "PHP The Right Way" då det är ett rätt omfattande dokument. Det jag så här långt känner mig mest intreserad av är Language Highlights. Webtec-kursen var min första bekantskap med programmering och php-delen där minns jag som väldigt svår. Nu har jag lite mer programmering i bagaget och tror därför att många saker som jag inte förstod då kommer att kännas självklara, eller i alla fall förståeliga när jag vet lite mer om vad det innebär att programmera, även om det har varit i andra språk. Av samma anledningen ska det även bli kul med Databases då vi utöver kodandet även haft en hel kurs i databaser och allt troligvis kommer att vara mycket klarare den här gången.</p>

<p>Min TIL detta kursmomentet, utöver att jag har väldigt många lyckotal, är faktiskt att jag på ett djupare plan förstår hur helheten, jämfört med i webtec-kursen funger. Jag märkte att det fungerade då också naturligtvis men det är tydligare hur och vad som är php, symfony, twig och vad controllern gör, hur vyerna renderas och så vidare. </p>

<h2>Kmom02</h2>
<p>Arv innebär att en klass ärver sina egenskaper från en annan klass. Man kan sen lägga till ytterligare funktionalitet genom att addera fler metoder och attribut till subklassen eller överskugga befintliga metoder. Med komposition menas att en klass innehåller en annan klass. Utöver att det måste även klassen i den andra klassen vara beroende av den andra för att existera. Den ena klassen kan alltså bara finnas genom att en annan klassen finns eller instansieras. Ett interface som implementeras är som en ram som visar vad en klass ska kunna göra. Det är just bara en ram och klassen i sig är den som löser det som ska lösas. Ett trait är kod som kan användas i en eller flera klasser. Med arv kan man bara ha en förälder och därför bara ärva från en klass. Traits kan man ha flera av och man kan använda ett trait till flera klasser. Traitet bygger alltså ut funktionaliteten i en redan existerande klass.</p>

<p>Jag är inte särskilt nöjd med min inlämning men jag är nöjd att jag har lämnat in den. Jag tycker att uppgiften var svår, trots att den har kortats ner. I och med att det både var svårt och omfattande har jag hållt det så enkelt som möjligt och försökt få ett resultat som fungerar utan att ha kunnat lägga så mycket tid på annat. Jag har skapat de nödvändiga klasserna och lagt alla routs, utöver json-routen i samma controller. På det har jag twig-filer för respektive vy och en väldigt basal styling som ser till att man förstår vad man ser men inte så mycket mer.</p>

<p>Klasserna hade man säkert kunna lösa smartare men jag är inte säker på hur. Jag kan tänka mig att det finns smartare lösningar för controllern också, eller i klasserna men för att se till att kodmängden i kontrollern hålls nere. Utifrån specifikationen var jag osäker på om man behövde göra post-formulär för vissa av sidorna men med tidsbristen hoppades jag på att det inte behövdes. Som användare hade det naturligtvis varit en klar förbättring att ha knappar för att dela ut kort och lägga till spelare jämfört med att skriva in det i browsern.</p>

<p>Jag har inte gått vidare med planeringen för kortspelet utan väljer att ta det i nästa kursmoment. Det gör egentligen ingen skillnad men det kändes skönare mentalt att få lämnat in det här för att sen ge mig in på nästa. Av erfarenhet från oopython kan jag dock säga att koden i projektet gick förhållandevis snabbt att skriva efter att ha gjort ett klassdiagram och tänkt igenom strukturen noga innan jag gav mig på kodandet.</p>

<p>Min TIL det här kursmomentet är nog främst att hela strukturen börjar sitta lite bättre och att jag har implementerat mina första PHP-klasser. Sammantaget känns det som att saker och ting började klarna lite mer mot slutet av uppgiften efter en tids kämpande.</p>
<h2>Kmom03</h2>
<p></p>

<h2>Kmom04</h2>
<p></p>

<h2>Kmom05</h2>
<p></p>

<h2>Kmom06</h2>
<p></p>

<h2>Kmom07/10</h2>
<p></p>

{% endblock %}
