{% extends 'proj/baseproj.html.twig' %}

{% block content %}
<h1>Clean code</h1>

<p>Vad innebär det att skriva snygg kod? Går det ens att skriva snygg kod? Även om vad som är snyggt är något subjektivt tror jag att det gör det. Som med allt annat i livet betyder inte det att alla kommer att hålla med om vad som är snyggt och inte inte men det kan finnas en allmän bild och konsensus kring många delar som därmed kan betraktas som snyggt eller som bra kod.</p>

<p>En viktig del som jag tror är svår att avgöra om vad som kan anses som bra är vad som gör något lätt att förstå. Detta för att vi förstår och tolkar saker på olika sätt. Vissa tycker att så få rader kod som möjligt är det bästa att skriva på. Andra kanske kan föredra några extra rader om det innebär att det blir lättare att se vad tilldelningarna och satserna innebär. Personligen tycker jag exempelvis att arrow fuctions i javascript är hemska och det tar mig alltid tid att förstå vad de gör. Någon som har större förståelse kommer däremot med stor sannolikhet tycka att det är ett väldigt snyggt sätt att skriva kod på då den blir mer koncis och ser inte vad som skulle kunna varit rörigt med den "enkla" syntaxen.</p>

<p>Denna typen av subjektiva bedömningar är svåra att mäta då de är just subjektiva. Andra delar av vad som är bra kod kan man dock göra mätningar på så länge man är överens om vad som är bra. Ett community som delar en uppfattning, vilket faktiskt finns i en del fall tycker jag därmed kan sätta standarder för vad som kan anses bra och dåligt. Även om man inte är överens om exakt hur en viss sats skrivs på bästa sätt är nog de flesta överens om att skriva komplex kod med en mängd beslutspunkter som hade kunnat skrivas enklare med mycket färre är en dålig sak. En klass med en massa beroenden, som den hade kunnat varit utan är även det något de flesta skulle anse är något negativt. Dessa saker går att mäta och det är här verktyg som phpmetrics, scrutinizer, linters och så vidare kan bidra till att vi skriver en snyggare kod.</p>

<p>Det är lättare att förstå varandra om vi lär oss att göra saker på samma sätt. Att ha en linter som visar på kodstandard tror jag definitivt kan göra att vi får det lättare att förstå varandras kod och att vi därmed skriver snyggare kod. Inte för att det ena sättet nödvändigtvis är bättre än det andra utan för att det då finns en konsensus kring hur vi skriver och att vi då lättare känner igen oss i det en annan har skrivit. Här börjar det ändå kännas som att man kan prata om bra och dåligt. Återigen betyder inte det att alla håller med men kan vi komma överrens om en standard som de flesta följer tycker jag man kan anse det vara bra kod. På samma sätt finns det andra mätningar som kan göras för att avgöra andra delar av en kods kvalité.</p>

<p>Program som phpmetrics och scrutinizer tar upp en mängd aspekter för att påvisa hur koden presterar på alla dessa parametrar. Några av mätningarna som görs är på det 4 C:na, coverage, cyclomatic complexity, cohesion och coupling.</p>

<p>Coverage står för kodtäckning och beskriver hur stor andel av koden som är täckt av tester. Cyclomatic complexity mäter hur komplext ett program är. Komplexiteten börjar på 1 och ökar sen med 1 för varje beslutsväg, exempelvis en if-sats, som koden tar. Med cohesion mäter man hur väl innehållet i en klass hänger ihop. Om klassen i fråga med dess metoder gör bara en sak har den klassen hög cohesion. Om det istället även görs andra saker i klassen, till exempel att en klass som definerar bilar även skulle ha metoder för att ta hand om ägaruppgifter, skulle den klassen ha låg cohesion. Coupling står för klassers beroende av varandra. Man eftersträvar att ha klasser som är oberoende av varandra då man helt enkelt har bättre koll på en klass som inte har beroenden utanför klassen.</p>

<p>Det finns en mängd andra mätvärden man kan diskutera också men syftet med alla dessa mätningar är ett och samma, att vi ska skriva bättre, snyggare kod. Bidrar det då till det? Som nämnt tidigare i texten tror jag att man kan säga att en kod som är onödigt komplex, har onödiga beroenden och så vidare är något negativt och att man därmed kan säga att det är snyggare kod om den inte är och har det. Mätningarna i sig kan inte alltid påvisa detta. De kan visa att si och så många beroenden finns och att den cyklomatiska komplexiteten har ett visst värde. Kanske är koden tvungen att se ut som den gör även om värdena skulle vara relativt höga. Det mätningarna däremot kan göra är att göra en medveten om att de här delarna kan ses som problematiska, kan jag göra något för att förbättra det? Jag skulle säga att det ökar chanserna och möjligheterna för att skriva en snyggare kod.</p>

<p>Coverage påverkar inte hur koden ser ut men med hög coverage kan någon annan direkt se att koden är vältestad vilket ökar chanserna för att koden fungerar som den ska. Även detta skulle jag säga gör koden snyggare. Det är på ett annat sätt än en följd kodstandard men det är ett sätt att bidra till att säkra kvalitén på koden även om man det finns en mängd andra aspekter som hur väl testerna är skrivna och vad de testar som har stor påverkan vad testningen säger om koden.</p>

<p>Vad innebär snygg kod var frågeställningen denna texten började med. Jag tycker att både den frågan och frågan om det går till viss del har besvarats. Snygg kod är för mig det branschmänniskor anser vara snyggt. Det finns helt enkelt, precis som i alla delar av samhället, normer och regler som majoriteten av oss följer och som har satts av oss som kollektiv. Det betyder inte att alla håller med, och i vissa delar kan man definitivt argumentera för att normer kan vara något negativt. Det finns dock positiva aspekter av det också och i det här fallet tycker jag absolut det ska ses som något positivt.</p>

<p>Om kunniga människor som även för fältet framåt kommer överens om best practice och standards ser jag ingen anledning att inte lite på deras omdöme, så länge det inte känns uppenbart fel men i mitt fall tycker jag inte det. Snygg kod är alltså i mitt tycke inget bestämt eller objektivt utan överenskommelser människor emellan där det egentliga syftet är att vi ska förstå varandra och varandras kod så bra som möjligt. Mätverktyg och linters är ett sätt att försöka uppnå det genom generaliseringar. Generaliseringar kan vara farligt och så även här om man blint följer dem. Kritiskt tänkande är alltid bra och man får se dessa verktyg för vad det är. Ett stöd och en hjälp till att uppnå något bra.</p>

<p>Den snygga koden är därmed relativ och det finns inte ett tydligt svar på vad det exakt är. Men det finns ett antal riktlinjer och hjälpmedel att bistå en med för att skriva sin kod så bra som möjligt. För mig innebär det att göra den så välfungerande, lättförståelig och tydlig för så många människor som möjligt. Jag tycker därmed att man kan skriva snygg kod och att det finns hjälpmedel som hjälper oss att göra det.</p>

{% endblock %}
